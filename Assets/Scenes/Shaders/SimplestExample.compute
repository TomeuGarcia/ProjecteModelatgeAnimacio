// Each #kernel tells which function to compile; you can have many kernels
//This indicates the entry point for our program (main function)
//we can get any of the compiled kernels in c# by using the function Shader.FindKernel("kernel_name")
//#pragma kernel CSMain
#pragma kernel CSMainParticles

//Read-Write structured buffer made of float3
//The structured buffer can be of any basic type or of a user declared struct
RWStructuredBuffer<float3> Result;

//Struct that contains a position and a velocity that we can use to create a structured buffer
//In c# we must declare the variables in the same order (and make sure they have the same memory layout if they are composite types!!!)
struct GameObjInf{
	float3 position;
	float3 velocity;
};
//StrucuredBuffer made up of our own struct objects
RWStructuredBuffer<GameObjInf> CoolerResult;

float deltaTime;
float3 gravityAcceleration;

//This specifies our thread group size
//GPUs allow to create thread groups in multiple dimensions for easier management of 3D data calculations, in our case we will stick to 1D
[numthreads(128,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID){
    // TODO: insert actual code here!

	CoolerResult[id.x].position = deltaTime* CoolerResult[id.x].velocity+ CoolerResult[id.x].position;
}

[numthreads(128, 1, 1)]
void CSMainParticles(uint3 id : SV_DispatchThreadID) {
	// TODO: insert actual code here!

	CoolerResult[id.x].position = deltaTime * CoolerResult[id.x].velocity + CoolerResult[id.x].position;
	CoolerResult[id.x].velocity = deltaTime * gravityAcceleration + CoolerResult[id.x].velocity;

	if (CoolerResult[id.x].position.y < 0)
	{
		CoolerResult[id.x].position.y = -CoolerResult[id.x].position.y;
		CoolerResult[id.x].velocity = -CoolerResult[id.x].velocity * (-CoolerResult[id.x].position.y) * 0.01f;
	}
}
